lsmod | grep -e overlay -e netfilter
sudo modprobe overlay
sudo modprobe br_netfilter
lsmod | grep -e overlay -e netfilter
sudo vi /etc/modules-load.d/kubernetes.conf
sysctl -a | grep bridge-nf-call
sysctl -a | grep ip_forward
sudo vi /etc/sysctl.d/99-kubernetes.conf
sudo sysctl --system
sudo sysctl -a | grep -e ip_forward -e net.bridge.bridge-nf-call-ip
sudo apt-get update
apt-get install -y containerd
sudo apt-get install -y containerd
sudo mkdir /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml 
sudo vi /etc/containerd/config.toml 
sudo systemctl restart containerd
sudo apt-get install -y vim curl
sudo systemctl status containerd
swapon -s
swapoff -a
sudo swapoff -a
swapon -s
sudo vi /etc/fstab 
sudo apt-get install -y apt-transport-https 
deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /
vi /etc/apt/sources.list.d/kubernetes.list
sudo vi /etc/apt/sources.list.d/kubernetes.list
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
apt-get update
sudp apt-get update
sudo apt-get update
sudo apt-cache madison kubeadm
sudo apt-get install kubeadm=1.31.4-1.1 kubelet=1.31.4-1.1 kubectl=1.31.4-1.1 -y 
sudo apt-mark hold kubectl kubeadm kubelet 
sudo kubeadm init --help
sudo kubeadm init --pod-network-cidr 192.168.0.0/16
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl get nodes
kubectl get pods -A
CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
CLI_ARCH=amd64
if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
cilium install
watch -n1 kubectl get pods -A
kubectl get nodes
sudo useradd jadzia
su - jadzia
sudo -i
kubeadm token create --print-join-command
kubectl get nodes
watch -n1 kubectl get pods -A
watch -n1 kubectl get pods -A -o wide
kubectl get nodes
kubectl get ns
kubectl get pods -n kube-system
kubectl get pods
kubectl get pods --all-namespaces 
kubectl get pods -A
kubectl create namespace test-ns
kubectl get ns
kubectl describe ns test-ns 
kubectl delete ns test-ns
kubectl get ns
kubectl api-resources 
vi .kube/config 
git clone https://github.com/mariano-italiano/lx-k_Feb.git
sudo apt-get install git -y
git clone https://github.com/mariano-italiano/lx-k_Feb.git
cd lx-k_Feb/
mkdir day1
cd day1
vi first-pod.yaml
kubectl apply -f first-pod.yaml 
vi first-pod.yaml
kubectl apply -f first-pod.yaml
kubectl delete pod nginx
kubectl create -f first-pod.yaml 
vi first-pod.yaml 
kubectl create -f first-pod.yaml 
kubectl apply -f first-pod.yaml
kubectl edit pod nginx
kubectl get pods
kubectl describe pod nginx
kubectl run pod1 --image httpd
kubectl get pods
kubectl run pod1 --image httpd --dry-run=client -o yaml 
kubectl run pod1 --image httpd --dry-run=client -o yaml > pod1.yaml
vi pod1.yaml
kubectl apply -f pod1.yaml
vi pod1.yaml
mv pod1.yaml pod2.yaml
kubectl apply -f pod2.yaml
kubectl gt pods
kubectl get pods
sudo apt-get install bash-completion
echo 'source <(kubectl completion bash)' >>~/.bashrc
source ~/.bashrc
kubectl get pods -o wide
curl http://10.0.1.90
kubectl delete -f first-pod.yaml 
kubectl apply -f first-pod.yaml 
kubectl get pods -o wide
kubectl get pod nginx -o yaml
kubectl get pods --show-labels 
kubectl run pod3 --image nginx
kubectl edit pod3
kubectl edit pod pod3
kubectl run pod3 --image nginx
kubectl get pods --show-labels 
kubectl get pods --selector app
kubectl get pods --selector app --show-labels 
kubectl get pods --selector app=pod2 --show-labels 
kubectl get pods nginx -o json
kubectl get pods -o wide
kubectl get pods -o wide --sort-by .status.podIP
kubectl get pods -o wide --sort-by .spec.containers[0].image
kubectl get --help
kubectl get pods
kubectl get pods --no-headers 
kubectl get pods --no-headers | awk '{print $5}'
kubectl get pods --no-headers | awk '{print $1 $5}' 
kubectl get pods --no-headers | awk '{print $5}' | cut -d m -f 2
kubectl get pods --no-headers | awk '{print $5}' | cut -d m -f 1
kubectl get pods --no-headers | awk '{print $5}' | cut -d m -f 1 | sort
kubectl get pods
kubectl exec -it nginx -- bash
kubectl exec -it nginx -- ls -la
kubectl exec -it nginx -- hostname
kubectl exec -it nginx -- uptime
kubectl --v=5 get pods
kubectl --v=6 get pods
kubectl --v=10 get pods
kubectl --v=8 get pods
kubectl get pods -n kube-system --show-labels 
kubectl get pods -n kube-system --show-labels 'component in(etcd),component notin(kube-scheduler)'
kubectl get pods -n kube-system --show-labels 'component in(etcd)'
kubectl get pods -n kube-system --show-labels --selector 'component in(etcd),component notin(kube-scheduler)'
kubectl get pods -n kube-system --show-labels --selector 'component in(etcd),component in(kube-scheduler)'
kubectl get pods -n kube-system --show-labels --selector 'tier in(control-plane),component in(kube-scheduler)'
kubectl get pods -n kube-system --show-labels --selector 'tier in(control-plane),component notin(kube-scheduler)'
kubectl get pods
kubectl get pods --show-labels 
kubectl label pod nginx kubernetes.io/env=test
kubectl get pods --show-labels 
kubectl label pod nginx kubernetes.io/env-
kubectl get pods --show-labels 
kubectl annotate pod nginx testAnnotation="jakis tam tekst opisowy dla poda" 
kubectl describe pod nginx 
kubectl annotate pod nginx testAnnotation2=test
kubectl describe pod nginx 
kubectl annotate pod nginx testAnnotaion2-
kubectl describe pod nginx 
kubectl annotate pod nginx testAnnotation2-
kubectl describe pod nginx 
kubectl annotate --overwrite pod nginx testAnnotation="nowy tekst"
kubectl describe pod nginx 
openssl genrsa -out devops.key
openssl req -new -key devops.key -out devops.csr -subj "/CN=devops"
ls -la
vi $HOME/.kube/config
echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lJZUtUV1Z6NU00d0F3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRBeU1USXhNRE14TlRCYUZ3MHlOakF5TVRJeE1ETTJOVEJhTUR3eApIekFkQmdOVkJBb1RGbXQxWW1WaFpHMDZZMngxYzNSbGNpMWhaRzFwYm5NeEdUQVhCZ05WQkFNVEVHdDFZbVZ5CmJtVjBaWE10WVdSdGFXNHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFERDZyOUYKOFJnQktCbVdrSVFFNVpmMTBSS3VBN2lGTlZxRlRFRWxDNkZOSGRaNmdXb1VxZlJxMzVWc2gwdEpZQXZSWmNaSgpROTl1T3lBWkROcThTMi9DeE5vTW83RUxDaE1GcHpSM1FJSHFHSG1tUFY4dmpldHVhY2tIRjF0cGxPMnZFWjBjCm9mQU1ydEpoWlZmekdXVGxmZkZtNEdaMFFLL1BjR21BS2dwbWltcUlTV2RhankzUXNyVHEwMk1WTFphQ1JWTlkKOW84ckRaNTNRWmVCZkROZk5CYmRDZVZNdzBmc0RTSG5DWldteE5lRHp3Y3ZuZEVCb1JlQ2ZnR0pSZEZwQ1NvOApFM0NXa1J2bmYyMnZ4ZE91ZDZrZVJmLzFwQ3VuTk84Rko2QXprbURGRkp6aVNxZTB0b3o4MmphNnRNN3VKeW83CkxjUmUzeEtuK25KcWJ1cTFBZ01CQUFHalZqQlVNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUsKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkFkOXhwL05iNEZ6UXQ5SwoxVkxtNisxbjRwcWZNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUEvVWlMb29wUzMrajBlSWoxTEYxZTVHdnBNCmUreElxTklPWkpjaVJhbmRJbnp3ekFlRFM5UkdUcHM4Q282U0tCSDlLZVV6N0krTGlRSjBSWStlR25PS0laQ1cKZDlnZDdqYlRWV1FJTldKcHJyQ21FbU9MT1oxMTVlRnA3Uy9zSVB4Ui9MZnVvOEpEandtT1RhUHd4cW9HT1Jwbgp3SllOUTBXNnY3dFZJa3dOQW4xcGs3U0RDclBlWjJueWlKM2JRTTJCN2pxc2ZMZmk5Yno2UmkvT3NaeG5MVUo4Ck9BVnIrUzVaMG0vakJlUXVuQlczcWJERSs5OFhsU1R6WTRLejNlTnAxTk1lOE1SN1JhdlRwdVBtQ1A5MHExNFMKblB2NVFLTHBodkI0c0t6MGYyNG9ScEVKYkUrZXIySTJSQ2FldDJkU0psYzU1cUd1RlBwWVBYL2RXMHRXCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" | base64 -d 
vi devops.csr 
cat devops.csr | base64 | tr -d '\n'
vi user-request-devops.yaml
kubectl apply -f user-request-devops.yaml
kubectl get certificatesigningrequests.certificates.k8s.io 
kubectl certificate approve user-request-devops 
kubectl get certificatesigningrequests.certificates.k8s.io 
kubectl get certificatesigningrequests.certificates.k8s.io -o yaml
kubectl get certificatesigningrequests.certificates.k8s.io -o jsonpath='{.status.certificate}'
kubectl get certificatesigningrequests.certificates.k8s.io user-request-devops -o jsonpath='{.status.certificate}'
kubectl get certificatesigningrequests.certificates.k8s.io user-request-devops -o jsonpath='{.status.certificate}' | base64 -d > devops.crt
cat devops.crt
kubectl --kubeconfig devops-config config set-cluster preprod --insecure-skip-tls-verify=true --server=https://192.168.1.100:6443\
kubectl --kubeconfig devops-config config set-cluster preprod --insecure-skip-tls-verify=true --server=https://192.168.1.100:6443
vi devops-config 
kubectl --kubeconfig devops-config config set-credentials devops --client-certificate devops.crt --client-key devops.key --embed-certs=true
vi devops-config 
kubectl --kubeconfig devops-config config set-context preprod-context --cluster preprod --user devops
vi devops-config 
sudo useradd -m -s /bin/bash devops
sudo passwd devops
kubectl create ns devops-ns
kubectl create role --name devops-role -n devops-ns --help
kubectl create role --name devops-role --help
kubectl create role devops-role --help
kubectl create role devops-role --verb=get,list,watch --resource=pods -n devops-ns 
kubectl create rolebinding devops-rolebinding --help
kubectl create rolebinding devops-rolebinding --role=devops-role --user=devops -n devops-ns
kubectl describe role devops-role
kubectl describe role devops-role -n devops-ns 
kubectl describe rolebindings.rbac.authorization.k8s.io -n devops-ns devops-rolebinding 
sudo -i
kubectl edit role -n devops-ns devops-role 
sudo -i
history
history | awk '$1 > 4' | cut -c 8- > ../day1-history.txt
